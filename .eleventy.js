const lazyImagesPlugin = require('eleventy-plugin-lazyimages');
const obfuscate = require('./site/_shortcodes/obfuscate');


module.exports = function(eleventyConfig) {
  const ENV_PROD = process.env.ELEVENTY_ENV === 'prod';

  // Add Nunjucks shortcodes
  eleventyConfig.addNunjucksShortcode("obfuscate", obfuscate);


  // Static files
  eleventyConfig.addPassthroughCopy('site/css/');
  eleventyConfig.addPassthroughCopy('site/js/');
  eleventyConfig.addPassthroughCopy('site/images/');
  eleventyConfig.addPassthroughCopy('site/svg/');
  eleventyConfig.addPassthroughCopy('site/manifest.json');


  // Watch assets generated by gulp
  eleventyConfig.setUseGitIgnore(false);
  eleventyConfig.addWatchTarget('site/css/');
  eleventyConfig.addWatchTarget('site/js/');
  eleventyConfig.addWatchTarget('site/svg/');


  // Transform Markdown content
  const markdownIt = require('markdown-it');
  eleventyConfig.setLibrary('md', markdownIt({
    html: true, // allow html tags in source
    breaks: true, // convert line-break to <br>
    linkify: true, // auto-convert urls to links (uses linkify-it)
  }));


  // Lazy-load images
  const lazyConfig = {
    imgSelector: 'img:not([src$=".svg"])', // custom image selector
    appendInitScript: false, // included in the main.js
    transformImgPath: src => src.replace(/^\.?\/images/, './site/images'),
  }
  eleventyConfig.addPlugin(lazyImagesPlugin, lazyConfig);


  // minify the html output
  const htmlmin = require('html-minifier');
  eleventyConfig.addTransform('htmlmin', function(content, outputPath) {
    if( outputPath.endsWith('.html') ) {
      return htmlmin.minify(content, {
        useShortDoctype: true,
        removeComments: false, // comments identify the excerpt split marker?
        collapseWhitespace: ENV_PROD,
      });
    }
    return content;
  });


  return {
    templateFormats : ['njk', 'md'],
    htmlTemplateEngine : 'njk',
    markdownTemplateEngine : 'njk',
    passthroughFileCopy: true,
    pathPrefix: '/',
    dir: {
      input: 'site',
      data: '_data', // relative to input
      output: 'dist'
    }
  };
}
